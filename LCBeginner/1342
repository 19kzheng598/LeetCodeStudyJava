/*
Given an integer num, return the number of steps to reduce it to zero.

In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.

 

Example 1:

Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.
Example 2:

Input: num = 8
Output: 4
Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.
Example 3:

Input: num = 123
Output: 12
 

Constraints:

0 <= num <= 106
*/ 

//Time: O(logn) Space: O(1) 
class Solution1 {
    public int numberOfSteps(int num) {
        int steps = 0;
        while(num != 0){
            if(num % 2 == 0){
                ++steps;
                num /= 2;
            }
            else{
                ++steps;
                --num; 
            }
        }
        return steps; 
    }
}

//Time: O(logn) Space: O(1) 
// ...01 & 010101101 is odd since 1 + even otherwise ...01 & 1011010 even so bit shift
class Solution2 {
    public int numberOfSteps(int num) {
        int steps = 0;
        while(num != 0){
            if((num & 1) == 0){ //remember to incase binary operations in parenthesis
                ++steps;
                num >>= 1; 
            }
            else{
                ++steps;
                --num; 
            }
        }
        return steps; 
    }
}
