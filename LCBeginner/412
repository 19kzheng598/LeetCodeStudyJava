/*
Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.
 

Example 1:

Input: n = 3
Output: ["1","2","Fizz"]
Example 2:

Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
Example 3:

Input: n = 15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
 

Constraints:

1 <= n <= 104
*/

//Time: O(n) Space: O(1)
class Solution1 {
    public List<String> fizzBuzz(int n) {
        List<String> answer = new ArrayList<>(n); //resize auto 
        for(int i = 1; i <= n; ++i){
            boolean divisibleBy3 = i % 3 == 0; 
            boolean divisibleBy5 = i % 5 == 0;
            if (divisibleBy3 && divisibleBy5)
                answer.add("FizzBuzz");
            else if(divisibleBy3)
                answer.add("Fizz");
            else if(divisibleBy5)
                answer.add("Buzz");
            else
                answer.add(String.valueOf(i));
        }
        return answer; 
    }
}

//Time: O(n) Space: O(1)
class Solution2 {
    public List<String> fizzBuzz(int n) {
        List<String> answer = new ArrayList<>(n); 
        for(int i = 1; i <= n; ++i){
            String currStr = "";
            boolean divisibleBy5 = i % 5 == 0;
            boolean divisibleBy3 = i % 3 == 0;
            if(divisibleBy3)
                currStr += "Fizz";
            if(divisibleBy5)
                currStr += "Buzz";
            if(currStr.isEmpty())
                currStr += String.valueOf(i);
            answer.add(currStr);
        }
        return answer; 
    }
}
